1.Підтримка багатопоточності в мові Python доступна через використання ряду
модулів. У стандартному модулі threading визначені потрібні для розробки
багатопотокової (multithreading) програми класи: кілька видів семафорів (класи
замків Lock, RLock і клас Semaphore) та інші механізми взаємодії між
потоками (класи Event і Condition), клас Timer для запуску функції 
після деякого часу. Модуль Queue реалізує чергу, якої можуть
користуватися відразу кілька потоків. Для створення і управління
потоками в стандартному модулі thread визначено клас Thread.

У синхронних операціях завдання виконуються один за одним. В асинхронних завдання можуть запускатися і завершаться незалежно один від одного. Одна асинхронна задача може запускатися і продовжувати виконуватися, поки виконання переходить до нової задачі. Асинхронні завдання не блокують (не змушують чекати завершення виконання завдання) операції і зазвичай виконуються у фоновому режимі.
Основною концепцією асинхронного введення-виведення є цикл обробки подій. У програмі може бути кілька циклів подій. Кожен потік буде мати не більше одного активного циклу обробки подій. Цикл обробки подій надає наступні можливості:
-Реєстрація, виконання та скасування відкладених викликів (з затримками).

-Створення клієнтських і серверних транспортів для різних видів зв'язку.

-Запуск підпроцесів і пов'язаних транспортів для зв'язку з зовнішньою програмою.

-Делегування ресурсовитратності викликів функцій в пул потоків


2.Tkinter є стандартним модулем Python і входить до складу його стандартної бібліотеки. Модуль Tkinter позиціонується для швидкого написання GUI-додатків. Його опис є в вбудованій довідці pydoc.
Серйозними графічними можливостями володіє модуль tkinter. його
основне призначення - створення графічних інтерфейсів для програм на
Python. Завдяки наявності елемента полотна (Canvas) його можна використовувати
для малювання векторної графіки.
