DB-API  - это интерфейс прикладной программы с базой данных, который должен реализовывать все модули расширения, которые служат для связи Python-программ с базами данных. 

База данных -	DB-API модуль
SQLite -	sqlite3
PostgreSQL	- psycopg2
MySQL	- mysql.connector
ODBC	- pyodbc

Параметры конструктора:
 dsn - Название источника данных в виде строки 
 user - Имя пользователя
password - Пароль
host - Адрес хоста, на котором работает СУБД
database - Имя базы данных.


Доступ к базе данных сделан доступным через объекты подключения. Модуль должен обеспечивать конструктор для них:

connect(parameters...)
Конструктор для создания подключения с базой данных. Возвращает объект подключения. 

apilevel - Строковая константа, устанавливающая поддержанный уровень DB API.
Целочисленная константа, устанавливающая уровень безопасности потоков, который интерфейс поддерживает. Возможные значения:
0	Потоки не могут совместно использовать модуль.
1	Потоки могут совместно использовать модуль, но не подключения.
2	Потоки могут совместно использовать модуль и подключения.
3	Потоки могут совместно использовать модуль, курсоры и подключения.


paramstyle - Строковая константа. Устанавливает тип маркера параметра, форматирующего ожидаемый интерфейсом. Возможные значения:
'qmark'	Стиль метки запроса, 
'numeric'	Числовой, позиционный стиль
'named'	Именованный стиль
'format'	Формат кодов ANSI C printf
'pyformat'	Расширенные форматные коды языка Python
Модуль должен делать всю информацию об ошибках доступной через эти исключительные ситуации или через подклассы от них:

Warning - ситуация для важных предупреждений подобно усечениям данных при вставке и т. д. Это должно быть подклассом от Python StandardError.
Error - для ситуациий, которые являются основным классом для всех других исключительных ситуаций ошибки.   Это обязательно должно быть подклассом Python StandardError.
InterfaceError - ситуация для ошибок, которые связаны с интерфейсом базы данных, а не с самой базой данных. Это должно быть подклассом Error.
DatabaseError - ситуация для ошибок, которые связаны с самой базой данных. Это должно быть подклассом Error.
DataError - ситуация для ошибок, которые появляются из-за проблем с обработанными данными, подобно делению на ноль, числовое значение вне диапазона и т.д. Это должно быть подклассом DatabaseError.
OperationalError - ситуация для ошибок, которые связаны с работой с базой данных и не обязательно подконтрольны программисту. Это должно быть подклассом от DatabaseError.
IntegrityError - ситуация вызывается, когда воздействуют на реляционную целостность базы данных. Это должно быть подклассом от DatabaseError.
InternalError - ситуация для случаев, когда база данных сталкивается с внутренней ошибкой, например, курсор больше не имеет силу, транзакция вышла из синхронизации, либо случилось что-то в этом роде. Это должно быть подклассом от DatabaseError.
ProgrammingError -  ситуация для ошибок программирования, должно быть подклассом DatabaseError.
NotSupportedError -  для ситуации, когда использовался метод или API базы данных, который не поддержан базой данных. Это должно быть подклассом DatabaseError.




a = []
for x in range (0, 1024):
  a.append(x)
  
print(a)

print("\n")

b = []
for elem in a:
  x = elem.to_bytes((elem.bit_length() // 8) + 1, byteorder='little')
  b.append(x)
  
print(b)

